üìÅ Git/cmd commands in creating a folder structure
mkdir		stands for "make directory" 	// This command creates a new folder in the current location (usually your terminal's current working directory).
cd		stands for "change directory" 	// This command changes the current working directory, which means your terminal now works within that folder.
touch		The touch command creates an empty file. You use it to create each of the files in their respective directories:
cd ..		Refers to the parent directory (goes up one level). EXAMPLE: So, after you create the backend folder structure, this command takes you back to the student_information_system folder.



üéØ Summary of Commands
Command	Purpose
git clone <repo_URL>	    Download (clone) a GitHub repository to your device.
cd <repository-name>	    Move into the project folder.
git status	                Check what has changed.
git add .	                Stage all changes.
git commit -m "message"	    Save changes with a message.
git push origin main	    Upload changes to GitHub.
git pull origin main	    Download the latest changes from GitHub.



üìåstep-by-step guide (with commands and explanations) on how to work on a specific branch (frontend_Elvinia) of a GitHub repository
‚úÖ Step-by-Step Git Workflow
git clone https://github.com/<username>/<repository-name>.git     	Clone the Repository
cd <repository-name>                                                 	Navigate into the Cloned Repository
git branch -a                                                         	Shows all local and remote branches
git checkout <branch_name>						Checkout/Use the speficic Branch
git pull origin <branch_name>						This makes sure your local <branch_name> branch is up to date with the latest remote changes
code .									open the files using a text editor or IDE (e.g., VS Code) and edit the code as needed
git status								See which files have been modified, added, or deleted
git add .								Stages all modified files for commit // Use `git add <filename>` if you want to add specific files only
git commit -m "Description"						Commits the staged files with a descriptive message
git push origin <branch_name>						Pushes your local <branch_name> branch changes to the remote repository

üí° Bonus Tips:
git branch				If you're not sure whether you're on the correct branch // The active branch will be highlighted with a *
git pull origin <branch_name>		To avoid merge conflicts, always pull before pushing
git checkout -b backend-feature-xyz	If you‚Äôre working in a team, consider creating a feature branch off of <branch_name>




 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

‚úÖ Step-by-Step Guide to Upload Your Files (System) to GitHub
1Ô∏è‚É£ Create a GitHub Repository
Go to GitHub and log in.
Click on "New Repository".
Enter a repository name and set it to public or private.
Click "Create Repository".

2Ô∏è‚É£ Upload All Files from Your Local System to GitHub (If Your Project Folder Doesn't Have Git Yet)
1. Open VS Code (or any terminal).
cd path/to/your-project-folder      //     cd "path/to/your-project-folder"    2.2 Navigate to your project folder: 
git init                              Initialize Git in your project
git add .                             Add all files to the staging area
git commit -m "Initial commit"        Commit the changes
git remote add origin <Your repo URL>      Connect the local repository to GitHub
git push -u origin main               Push your files to GitHub


‚úÖ Uploading a Specific Edited File to GitHub
(When You Have Modified a Specific File in the Repository)
git status                Check the modified files:
git add <filename>        Add the specific modified file
git commit -m "Updated index.html with new features"           Commit the change with a message
git push origin main      Push the changes to GitHub


‚úÖ How to Pull Files from GitHub, Edit in VS Code, and Push Back
1Ô∏è‚É£ Pull Files from GitHub to Your Local Machine
1. Open VS Code or Git Bash.
cd path/to/your-project-folder      Navigate to your project folder
git pull origin main                Pull the latest changes from GitHub

2Ô∏è‚É£ Edit Files in VS Code
- Open the project in VS Code.
- Make the necessary changes.

3Ô∏è‚É£ Stage and Commit Changes
git status      Check what files were modified
git add .       Add the modified files
git commit -m "Fixed bug in login system"     Commit with a meaningful message

4Ô∏è‚É£ Push the Changes Back to GitHub
git push origin main 

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
‚úîÔ∏è Step-by-Step Git Branching and Merging Workflow

1Ô∏è‚É£
1. Setting Up Your Git Repository
git clone <repository_url>        1.1. Clone an Existing Repository
git init                          1.2. Initialize a New Repository


2Ô∏è‚É£
2. Creating and Working with Branches
git checkout -b <branch_name>           2.1. Create a New Branch and Switch to It
git branch                              2.2. View the Current Branch

 
3Ô∏è‚É£
3. Making Changes and Committing to Your Branch
git add <filename>  or  git add .                  3.1. Staging Changes
git commit -m "Describe your changes"              3.2. Committing Changes

 
4Ô∏è‚É£
4. Pushing Your Branch to Remote (GitHub, GitLab, etc.)
git push -u origin <branch_name>         4.1. Push a New Branch to Remote
git push                                 4.2. Push Subsequent Changes

 
5Ô∏è‚É£
5. Switching Between Branches
git checkout <branch_name>          If you need to switch to a different branch, use:

 
6Ô∏è‚É£
6. Merging Branches
git checkout main             6.1. Checkout the Target Branch
git pull origin main          6.2. Pull the Latest Changes (Optional but Recommended)
git merge <branch_name>       6.3. Merge the Feature Branch

 
7Ô∏è‚É£
7. Resolving Merge Conflicts
<<<<<<< HEAD                                   7.1. Identifying Merge Conflicts
Current changes in the target branch
=======
Changes from the branch you're merging in
>>>>>>> <branch_name>

git add <resolved_file>                                                               7.2. Resolving Conflicts
git commit -m "Resolve merge conflicts and merge feature/login-page into main"        7.3. Completing the Merge

 
8Ô∏è‚É£
8. Pushing the Merged Changes
git push origin main

 
9Ô∏è‚É£ 
9. Deleting a Branch (Optional)
git branch -d <branch_name>                     9.1. Delete a Local Branch // To delete a local branch that has been merged:
git branch -D <branch_name>                                                // If the branch hasn‚Äôt been merged and you still want to delete it, force deletion with:
git push origin --delete <branch_name>          9.2. Delete a Remote Branch




‚úîÔ∏è‚úîÔ∏è Step-by-Step Process for Cloning Only the a specific Branch
1Ô∏è‚É£ Open Your Terminal or Command Prompt      Ensure Git is installed. You can check by running:
üî∫git --version

2Ô∏è‚É£ Navigate to Your Desired Directory        Before cloning, move to the folder where you want to store the project: // Replace /path/to/your/directory with your actual directory.
üî∫cd /path/to/your/directory

3Ô∏è‚É£ Clone the Repository with a Specific Branch        Use the following command:
üî∫git clone --single-branch --branch <branch-name> https://github.com/username/repository.git

‚úÖ‚ÄºÔ∏èExplanation:
üîπgit clone ‚Üí This command is used to copy a repository from a remote source.
üîπ--single-branch ‚Üí Tells Git to fetch only one branch instead of downloading all branches.
üîπ--branch <branch-name> ‚Üí Specifies the branch to clone (replace <branch-name> with your desired branch).
üîπhttps://github.com/username/repository.git ‚Üí This is the repository URL; replace it with the actual repo link.


4Ô∏è‚É£ Navigate Into the Cloned Project         Once cloning is complete, move into the project directory: // Replace repository with the actual name of the cloned folder.
üî∫cd repository

5Ô∏è‚É£ Verify the Current Branch         	     Check if you're on the correct branch:
üî∫git branch

‚úÖ‚ÄºÔ∏èYou should see:        The asterisk (*) indicates the currently active branch.
* <branch-name>

6Ô∏è‚É£ Pull the Latest Changes (Optional)        To ensure you have the latest updates from the remote frontend branch: // This fetches and merges any new changes from the remote frontend branch.
üî∫git pull origin <branch-name>

7Ô∏è‚É£ Additional Notes
        üîπIf you later need to switch to another branch, you can fetch and checkout that branch:
üî∫git fetch origin <branch-name>
üî∫git checkout <branch-name>

        üîπIf you need all branches later, you can fetch them without re-cloning:
üî∫git fetch --all


 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



______________________________________________________________________________________________

üìå‚ÄºÔ∏èMerging into Staging and Main
```
1. Pull Requests:
 ‚û°Ô∏è Each member creates a **Pull Request (PR)** to merge their branch into "staging". ~
 ‚û°Ô∏è On GitHub:
     ‚ñ™ Go to [Pull Requests}
     ‚ñ™ Click [New Pull Request]
     ‚ñ™ Select:
        - Base branch:** `staging`
        - Compare branch:** `<your-branch>`
     ‚ñ™ Add description and submit.

2. Leader (Santoya) Reviews and Merges:**
 ‚û°Ô∏è Santoya reviews and merges all PRs into `staging`.
 ‚û°Ô∏è After testing, create a PR to merge `staging` into `main`.
```
________________________________________________________________________________________________



üîç Using MySQL Command Line üìå
1. Open XAMPP Shell
2. Open your terminal and login to MySQL:	mysql -u root -p
3. Use your database:				USE student_info_system;
4. Show all tables in that database:		SHOW TABLES;
